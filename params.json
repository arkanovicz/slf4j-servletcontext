{"name":"Webapp-slf4j-logger","tagline":"SLF4J backend to log to a ServletContext","body":"<!--\r\nLicensed to the Apache Software Foundation (ASF) under one\r\nor more contributor license agreements.  See the NOTICE file\r\ndistributed with this work for additional information\r\nregarding copyright ownership.  The ASF licenses this file\r\nto you under the Apache License, Version 2.0 (the\r\n\"License\"); you may not use this file except in compliance\r\nwith the License.  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing,\r\nsoftware distributed under the License is distributed on an\r\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, either express or implied.  See the License for the\r\nspecific language governing permissions and limitations\r\nunder the License.\r\n-->\r\n\r\nwebapp-slf4j-logger\r\n===================\r\n\r\nThis is a simple logger with minimal configuration.  It is an\r\n[SLF4J](http://www.slf4j.org/) backend that forwards logs to a\r\n`ServletContext` object.\r\n\r\nAll log messages are logged using\r\n[ServletContext#log](http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContext.html#log%28java.lang.String,%20java.lang.Throwable%29).\r\n\r\nFeatures:\r\n\r\n * Serialization and desierialization\r\n * Custom formats\r\n * Mapped Diagnostic Contexts (MDC)\r\n * Automatic IP tag (using MDC and servlet 3.0 annotations)\r\n\r\n# Configuration\r\n\r\n## Inclusion in a 3.0 webapp\r\n\r\nIf your J2EE container is complient with the 3.0 servlet API, then you just have to include webapp-slf4j-logger.jar in your WEB-INF/lib directory.\r\n\r\n## Log level\r\n\r\nThe logging level can be set with a context parameter.  Possible\r\nvalues are (case insensitive) `trace`, `debug`, `info`, `warn`,\r\n`error`, following the standard slf4j levels.\r\n\r\n    <context-param>\r\n      <param-name>webapp-slf4j-logger.level</param-name>\r\n      <param-value>debug</param-value>\r\n    </context-param>\r\n\r\nThe default enabled level is INFO.\r\n\r\n## Format\r\n\r\nThe format can be specified with a context parameter, as a sequence of placeholders and literal text.\r\n\r\n    <context-param>\r\n      <param-name>webapp-slf4j-logger.format</param-name>\r\n      <param-value>%logger [%level] [%ip] %message</param-value>\r\n    </context-param>\r\n\r\nPlaceholders begin with '%' and must only contain alpha-numeric characters.\r\n\r\nPredefined placeholders:\r\n\r\n* %date - the timestamp, formatted as \"YYYY-MM-DD HH:mm:ss,sss\".\r\n* %level, %Level, %LEVEL - the level in lowercase, standard case or uppercase (and left-padded to five characters).\r\n* %logger - the name of the logger (for class names, the package is not shown).\r\n* %ip - the IP address of the current request\r\n* %message - the actual log message string\r\n\r\nCustom placeholders must correspond to existing MDC tags. For instance, to see IPs of each log line's request,\r\nyou can use the provided com.republicate.slf4j.helpers.IPFilter, and set up a format with the %ip placeholder.\r\n\r\nThe default format is:\r\n    %logger [%level] [%ip] %message\r\n(it doesn't include %date, as the date will usually be added by the J2EE container, nor does it add a terminal \\n, as the container will take care of it).\r\n\r\n## Email notifications\r\n\r\nThe logger can be configured to send an email if severity is beyond a certain level (typically, warning or error). The configuration parameter is of the form:\r\n    *level*:*protocol*:*mail_server*:*port*:*from_address*:*to_address*\r\nThe only protocol supported for now is smtp.\r\n\r\nExample:\r\n\r\n    <context-param>\r\n      <param-name>webapp-slf4j-logger.notification</param-name>\r\n      <param-value>warn:smtp:mail.server:25:from@address:to@address</param-value>\r\n    </context-param>\r\n\r\n## Inclusion in a maven-based project\r\n\r\nDeclare a dependency on `webapp-slf4j-logger`:\r\n\r\n    <dependency>\r\n      <groupId>com.republicate</groupId>\r\n      <artifactId>webapp-slf4j-logger</artifactId>\r\n      <version>1.0.0</version>\r\n    </dependency>\r\n\r\n## Inclusion in a non-3.0 webapp\r\n\r\nIf your J2EE container is not complient with servlet API 3.0, you have to add to `web.xml`:\r\n\r\n    <listener>\r\n      <listener-class>com.republicate.slf4j.impl.ServletContextLoggerSCL</listener-class>\r\n    </listener>\r\n\r\nAnd if you want to enable the %ip format tag, you'll also have to add the following filter:\r\n\r\n    <filter>\r\n      <filter-name>webapp-slf4j-logger-ip-tag-filter</filter-name>\r\n      <filter-class>com.republicate.slf4j.impl.IPTagFilter</filter-class>\r\n    </filter>\r\n\r\nwith its mapping:\r\n\r\n    <filter-mapping>\r\n      <filter-name>webapp-slf4j-logger-ip-tag-filter</filter-name>\r\n      <url-pattern>/*</url-pattern>\r\n      <dispatcher>REQUEST</dispatcher>\r\n      <dispatcher>FORWARD</dispatcher>\r\n    </filter-mapping>\r\n\r\n## FAQ\r\n\r\n### All other SLF4J jars begin with \"slf4j\". Why isn't this library called slf4j-webapp-logger?\r\n\r\nSome containers, Tomcat at least, will not search for servlet-3.0 annotations in a certain number of jars, among which all slf4j-* jars...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}